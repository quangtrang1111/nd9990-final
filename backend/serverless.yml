org: quangtrang1111
app: my-album-app
service: my-album-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example,
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    ALBUMS_TABLE: Albums-${self:provider.stage}
    ALBUMS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: my-album-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    # Enable API Gateway logs
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API
        description: Serverless backend for My Album app
    models:
      - name: CreateAlbumRequest
        contentType: application/json
        schema: ${file(models/create-album-model.json)}
      - name: UpdateAlbumRequest
        contentType: application/json
        schema: ${file(models/update-album-model.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetAlbums:
    handler: src/lambda/http/getAlbums.handler
    events:
      - http:
          method: get
          path: albums
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - { "Fn::GetAtt": ["AlbumsTable", "Arn" ] }
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ALBUMS_TABLE}/index/${self:provider.environment.ALBUMS_CREATED_AT_INDEX}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - '*'

  GetAlbum:
    handler: src/lambda/http/getAlbums.handler
    events:
      - http:
          method: get
          path: albums/{albumId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - { "Fn::GetAtt": ["AlbumsTable", "Arn" ] }
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ALBUMS_TABLE}/index/${self:provider.environment.ALBUMS_CREATED_AT_INDEX}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - '*'

  CreateAlbum:
    handler: src/lambda/http/createAlbum.handler
    events:
      - http:
          method: post
          path: albums
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-album-model.json)}
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: "Create a Album"
            description: "Create a new Album item"
            requestModels:
              "application/json": CreateAlbumRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - { "Fn::GetAtt": ["AlbumsTable", "Arn" ] }
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - '*'

  UpdateAlbum:
    handler: src/lambda/http/updateAlbum.handler
    events:
      - http:
          method: patch
          path: albums/{albumId}
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/update-album-model.json)}
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: "Update a Album"
            description: "Modify an existing Album item"
            requestModels:
              "application/json": UpdateAlbumRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - { "Fn::GetAtt": ["AlbumsTable", "Arn" ] }
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - '*'

  DeleteAlbum:
    handler: src/lambda/http/deleteAlbum.handler
    events:
      - http:
          method: delete
          path: albums/{albumId}
          cors: true
          authorizer: Auth
          documentation:
            summary: "Delete a Album"
            description: "Delete a Album item from its id"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource:
          - { "Fn::GetAtt": ["AlbumsTable", "Arn" ] }
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - '*'

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: albums/{albumId}/attachment
          authorizer: Auth
          cors: true
          documentation:
            summary: "Signed url and attachmentUrl update"
            description: "Generate a signed url and update/add the attachmentUrl property to the album"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource:
          - { "Fn::GetAtt": ["AlbumsTable", "Arn" ] }
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - '*'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH,PUT'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    AlbumsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: albumId
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: albumId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ALBUMS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.ALBUMS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false